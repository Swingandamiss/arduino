#define IR_SENSOR_RIGHT 11
#define IR_SENSOR_LEFT 12
#define ULTRASONIC_TRIGGER_PIN 2
#define ULTRASONIC_ECHO_PIN 3
#define MOTOR_SPEED 75
#define STOP_DISTANCE 20 // Distance in centimeters at which the car should stop
// Right motor
int rightMotorPin1 = 7;
int rightMotorPin2 = 8;
// Left motor
int leftMotorPin1 = 9;
int leftMotorPin2 = 10;
void setup()
{
  // The problem with TT gear motors is that, at very low pwm value it does not even rotate.
  // If we increase the PWM value then it rotates faster and our robot is not controlled in that speed and goes out of line.
  // For that we need to increase the frequency of analogWrite.
  // Below line is important to change the frequency of PWM signal on pin D5 and D6
  // Because of this, motor runs in controlled manner (lower speed) at high PWM value.
  // This sets frequency as 7812.5 Hz.
  TCCR0B = TCCR0B & B11111000 | B00000010; 
  pinMode(rightMotorPin1, OUTPUT);
  pinMode(rightMotorPin2, OUTPUT);
  pinMode(leftMotorPin1, OUTPUT);
  pinMode(leftMotorPin2, OUTPUT);
  pinMode(IR_SENSOR_RIGHT, INPUT);
  pinMode(IR_SENSOR_LEFT, INPUT);
  pinMode(ULTRASONIC_TRIGGER_PIN, OUTPUT);
  pinMode(ULTRASONIC_ECHO_PIN, INPUT);
  rotateMotor(0, 0);
}
void loop()
{
  int rightIRSensorValue = digitalRead(IR_SENSOR_RIGHT);
  int leftIRSensorValue = digitalRead(IR_SENSOR_LEFT);
  // Ultrasonic sensor readings
  long duration;
  int distance;
  digitalWrite(ULTRASONIC_TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(ULTRASONIC_TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(ULTRASONIC_TRIGGER_PIN, LOW);
  duration = pulseIn(ULTRASONIC_ECHO_PIN, HIGH);
  distance = duration * 0.034 / 2; // Convert to centimeters
  // If obstacle detected within stop distance, stop
  if (distance < STOP_DISTANCE)
  {
    rotateMotor(0, 0);
  }
  else
  {
    // If none of the sensors detects black line, then go straight
    if (rightIRSensorValue == LOW && leftIRSensorValue == LOW)
    {
      rotateMotor(MOTOR_SPEED, MOTOR_SPEED);
    }
    // If right sensor detects black line, then turn right
    else if (rightIRSensorValue == HIGH && leftIRSensorValue == LOW)
    {
      rotateMotor(-MOTOR_SPEED, MOTOR_SPEED);
    }
    // If left sensor detects black line, then turn left
    else if (rightIRSensorValue == LOW && leftIRSensorValue == HIGH)
    {
      rotateMotor(MOTOR_SPEED, -MOTOR_SPEED);
    }
    // If both the sensors detect black line, then stop
    else
    {
      rotateMotor(0, 0);
    }
  }
}
void rotateMotor(int rightMotorSpeed, int leftMotorSpeed)
{
  if (rightMotorSpeed < 0)
  {
    digitalWrite(rightMotorPin1, LOW);
    digitalWrite(rightMotorPin2, HIGH);
  }
  else if (rightMotorSpeed > 0)
  {
    digitalWrite(rightMotorPin1, HIGH);
    digitalWrite(rightMotorPin2, LOW);
  }
  else
  {
    digitalWrite(rightMotorPin1, LOW);
    digitalWrite(rightMotorPin2, LOW);
  }
  if (leftMotorSpeed < 0)
  {
    digitalWrite(leftMotorPin1, LOW);
    digitalWrite(leftMotorPin2, HIGH);
  }
  else if (leftMotorSpeed > 0)
  {
    digitalWrite(leftMotorPin1, HIGH);
    digitalWrite(leftMotorPin2, LOW);
  }
  else
  {
    digitalWrite(leftMotorPin1, LOW);
    digitalWrite(leftMotorPin2, LOW);
  }
  analogWrite(rightMotorPin1, abs(rightMotorSpeed));
  analogWrite(leftMotorPin1, abs(leftMotorSpeed));
} 
